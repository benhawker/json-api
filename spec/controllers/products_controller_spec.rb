require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProductsController, :type => :controller do

  let(:params) do
    { format: :json }
  end

  let!(:user) { User.create!(id: 1, name: "test", email: "test@test.com", access_token: "e0b466508d4dcdf459f7") }

  before { allow(controller).to receive(:user).and_return(user) }

  let!(:category) { FactoryGirl.create(:category, id: 1) }

  let!(:product_1) { FactoryGirl.create(:product, id: 1) }
  let!(:product_2) { FactoryGirl.create(:product, id: 2) }

  let(:valid_attributes) do
    {
       "name" => "product1",
       "price" => 1,
       "category_id" => 1,
       "stock_quantity" => 123
    }
  end

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET #index" do
    render_views

    it  "returns a list of products" do
      get :index, params
      expect(response.code).to eq "200"
      result = JSON.parse(response.body)

      product = result.first
      expect(product["id"]).to eq 1
      expect(product["name"]).to eq product_1.name
      expect(product["stock_quantity"]).to eq 1
      expect(product["url"]).to eq "http://test.host/products/1.json"

      product = result.last
      expect(product["id"]).to eq 2
      expect(product["name"]).to eq product_2.name
      expect(product["stock_quantity"]).to eq 1
      expect(product["url"]).to eq "http://test.host/products/2.json"
    end
  end

  # Further specs to follow.
end
